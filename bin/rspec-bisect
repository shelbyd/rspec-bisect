#!/usr/bin/env ruby

require 'json'

result = `rspec --format json`
parsed = JSON.parse result

examples = parsed["examples"]
failure_count = parsed["summary"]["failure_count"]
if failure_count > 0
  puts "#{failure_count} failing test#{failure_count > 1 ? 's' : ''}."
else
  puts "No failing tests."
end

failing_examples = examples.select { |e| e["status"] == "failed" }

def run_examples(examples)
  test_string = examples.map { |e| "#{e["file_path"]}:#{e["line_number"]}" }.join ' '
  `rspec #{test_string}`
end

def last_command_passed?
  $?.exitstatus == 0
end

def last_command_failed?
  not last_command_passed?
end

order_dependent_examples = failing_examples.select do |example|
  run_examples([example])
  last_command_passed?
end

if order_dependent_examples.size > 0
  puts "Order dependenc#{ order_dependent_examples.size > 1 ? 'ies' : 'y'} detected:"
  order_dependent_examples.each do |example|
    puts "\t#{example["full_description"]}"
  end
else
  puts "No order dependencies."
end

order_dependent_examples.each do |example|
  puts

  candidates = examples.take_while do |e|
    example["file_path"] != e["file_path"] ||
        example["line_number"] != e["line_number"]
  end

  culprit_count_theory = 1
  while candidates.size > culprit_count_theory
    found_useless_group = false
    candidates.each_slice(candidates.size / (culprit_count_theory + 1)) do |excluded_candidates|
      candidate_group = candidates - excluded_candidates

      run_examples candidate_group + [example]
      if last_command_failed?
        candidates = candidate_group

        found_useless_group = true
        break
      end
    end

    culprit_count_theory += 1 unless found_useless_group
  end

  candidates.each { |candidate| puts candidate["full_description"] }

  puts example["full_description"]
end

